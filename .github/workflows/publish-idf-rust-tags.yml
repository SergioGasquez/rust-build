name: Publish IDF-Rust Tags

on:
  workflow_dispatch:
    inputs:
      rust-build-branch:
        description: "Branch of rust-build to use"
        required: true
        default: "main"
      toolchain-version:
        description: "Version of Rust toolchain"
        required: true
        default: "1.65.0.1"

jobs:
  # QEMU
  esp-idf:
    name: ${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }} tag
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: ["esp32", "esp32s2", "esp32s3", "esp32c3", "all"]
        esp-idf:
          - name: v4.4
            branch: release/v4.4
            template-name: v4.4
          # - name: master
          #   branch: master
          #   template-name: mainline
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and publish tag
        uses: docker/build-push-action@v2
        with:
          context: .
          file: idf-std-rust.Containerfile
          build-args: |
            XTENSA_TOOLCHAIN_VERSION=${{ github.event.inputs.toolchain-version }}
            ESP_IDF_VERSION=${{ matrix.esp-idf.branch }}
            ESP_BOARD=${{ matrix.board }}
          tags: espressif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }},espressif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_latest
          push: true
          platforms: linux/amd64, linux/arm64
    # Hosted runner
  # esp-idf:
  #   name: ${{ matrix.os.runner }} - ${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }} tag
  #   runs-on: ${{ matrix.os.runner }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # board: ["esp32", "esp32s2", "esp32s3", "esp32c3", "all"]
  #       board: ["esp32"]
  #       esp-idf:
  #         - name: v4.4
  #           branch: release/v4.4
  #           template-name: v4.4
  #         # - name: master
  #         #   branch: master
  #         #   template-name: mainline
  #       os:
  #         - runner: ubuntu-latest
  #           platform: linux/amd64
  #           arch: amd64
  #           host-triple: x86_64-unknown-linux-gnu
  #         - runner: macos-m1-self-hosted
  #           platform: linux/arm64
  #           arch: arm64
  #           host-triple: aarch64-unknown-linux-gnu
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Build and push Docker image
  #       if: matrix.os.runner == 'ubuntu-latest'
  #       run: |
  #         docker image build --no-cache --tag espressif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}_${{ matrix.os.arch }} \
  #          --file idf-rust.Containerfile --build-arg XTENSA_TOOLCHAIN_VERSION=${{ github.event.inputs.toolchain-version }} \
  #          --build-arg ESP_IDF_VERSION=${{ matrix.esp-idf.branch }} --build-arg ESP_BOARD=${{ matrix.board }} --build-arg HOST_TRIPLE=${{ matrix.os.host-triple }} .
  #         docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin < ${{ secrets.DOCKER_TOKEN }}
  #         docker push espressif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}_${{ matrix.os.arch }}
  #     - name: Build and push Podman image
  #       if: matrix.os.runner == 'macos-m1-self-hosted'
  #       run: |
  #         podman ps >/dev/null 2>/dev/null || podman machine start
  #         podman image build --no-cache --net=host --tag espressif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}_${{ matrix.os.arch }} \
  #          --file idf-rust.Containerfile --build-arg XTENSA_TOOLCHAIN_VERSION=${{ github.event.inputs.toolchain-version }} \
  #          --build-arg ESP_IDF_VERSION=${{ matrix.esp-idf.branch }} --build-arg ESP_BOARD=${{ matrix.board }} --build-arg HOST_TRIPLE=${{ matrix.os.host-triple }} .
  #         podman login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin docker.io < ${{ secrets.DOCKER_TOKEN }}
  #         podman push espressif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}_${{ matrix.os.arch }}
  #     - name: Create manifest
  #       if: matrix.os.runner == 'ubuntu-latest' && success()
  #       run: |
  #         docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin < ${{ secrets.DOCKER_TOKEN }}
  #         docker manifest create \
  #         espresif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }} \
  #         --amend espresif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}_amd64 \
  #         --amend espresif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}_arm64
  #         docker manifest push espresif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_${{ github.event.inputs.toolchain-version }}
  #         docker manifest push espresif/idf-rust:${{ matrix.board }}_${{ matrix.esp-idf.name }}_latest
  #     # - name: Push combined tag
  #     #   run:

  # bare-metal:
  #   name: ${{ matrix.board }}_${{ github.event.inputs.toolchain-version }} tag
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       board: ["esp32", "esp32s2", "esp32s3", "esp32c3", "all"]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Build Docker image
  #       if: matrix.board != 'all'
  #       run: |
  #         docker image build --tag idf-rust:${{ matrix.board }}_${{ github.event.inputs.toolchain-version }} \
  #          --file idf-rust.Containerfile --build-arg XTENSA_TOOLCHAIN_VERSION=${{ github.event.inputs.toolchain-version }} \
  #          --build-arg ESP_BOARD=${{ matrix.board }} .
  #     - name: Build template project using generated tag
  #       if: matrix.board != 'all'
  #       run: |
  #         docker run --user esp --mount type=bind,source="$(pwd)/build-template-project.sh",target=/workspace/build-template-project.sh,consistency=cached \
  #                --rm idf-rust:${{ matrix.board }}_${{ github.event.inputs.toolchain-version }} /bin/bash /workspace/build-template-project.sh esp-template ${{ matrix.board }}
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_TOKEN }}
  #     - name: Build - ${{ matrix.board }}_${{ github.event.inputs.toolchain-version }} tag
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: idf-rust.Containerfile
  #         build-args: |
  #           XTENSA_TOOLCHAIN_VERSION=${{ github.event.inputs.toolchain-version }}
  #           ESP_BOARD=${{ matrix.board }}
  #         tags: espressif/idf-rust:${{ matrix.board }}_${{ github.event.inputs.toolchain-version }},espressif/idf-rust:${{ matrix.board }}_latest
  #         push: true
  #         platforms: linux/amd64, linux/arm64
